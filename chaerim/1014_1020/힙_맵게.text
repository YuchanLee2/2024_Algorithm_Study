import java.util.*;
class Solution {
    public int solution(int[] scoville, int K) {
       
        PriorityQueue<Integer> heap = new PriorityQueue<>();
        for(int s : scoville){
            heap.offer(s);
        }

        if(heap.size()==0){
            return -1;
        }

        else{
            if(heap.peek()>=K){
                return 0;  
            }
        }
        
        int mixed = 0;  
        int answer = -1; 
        
        while(heap.size() >= 2){
            int first = heap.poll(); 
            int second = heap.poll(); 
            int new_scovile = first + (second * 2); 
            mixed++;
            
            if(new_scovile>=K){
                
                if(heap.isEmpty()){
                    return mixed;
                
                }else{
                    int next = heap.peek();
                    
                    if(next>=K){
                        return mixed;
                   
                    }else{
                        heap.offer(new_scovile);        
                    }
                }
            
            }else{
                heap.offer(new_scovile);
            }

        }
        
        return answer;
    }
}