import java.util.*;

class Solution {
    
    static class Job implements Comparable<Job> {
        int requestTime, workingTime;
        
        public Job(int requestTime, int workingTime) {
            this.requestTime = requestTime;
            this.workingTime = workingTime;
        }
        
        // 작업 시간이 짧은 순으로 정렬
        @Override
        public int compareTo(Job j) {
            if (this.workingTime == j.workingTime) {
                return this.requestTime - j.requestTime;
            }
            return this.workingTime - j.workingTime;
        }
    }
    
    public int solution(int[][] jobs) {
        // 작업 대기 큐: 요청 시간 기준으로 정렬된 최소 힙
        PriorityQueue<Job> waitingQueue = new PriorityQueue<>(Comparator.comparingInt(j -> j.requestTime));
        
        // 실행 가능 작업 큐: 작업 시간 기준으로 정렬된 최소 힙
        PriorityQueue<Job> availableQueue = new PriorityQueue<>();
        
        // 모든 작업을 대기 큐에 추가
        for(int[] job: jobs) {
            waitingQueue.offer(new Job(job[0], job[1]));
        }
        
        int currentTime = 0; // 현재 시간
        int totalWaitTime = 0; // 총 대기 시간
        int processedJobs = 0; // 처리된 작업 수
        
        while (!waitingQueue.isEmpty() || !availableQueue.isEmpty()) {
            // 현재 시간에 요청된 모든 작업을 실행 가능 큐로 이동
            while (!waitingQueue.isEmpty() && waitingQueue.peek().requestTime <= currentTime) {
                availableQueue.offer(waitingQueue.poll());
            }
            
            if (!availableQueue.isEmpty()) {
                // 작업 시간이 가장 짧은 작업을 선택
                Job currentJob = availableQueue.poll();
                currentTime += currentJob.workingTime; // 작업 처리 시간만큼 현재 시간 증가
                totalWaitTime += currentTime - currentJob.requestTime; // 대기 시간 계산
                processedJobs++;
            } else {
                // 실행 가능 작업이 없으면 다음 작업의 요청 시간으로 현재 시간 이동
                if (!waitingQueue.isEmpty()) {
                    currentTime = waitingQueue.peek().requestTime;
                }
            }
        }
        
        // 평균 대기 시간 계산
        return totalWaitTime / processedJobs;
    }
}
