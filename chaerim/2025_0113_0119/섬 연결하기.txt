import java.util.*;

class Solution {

    public static int[] root; //루트노드

    public int find(int n){ //루트노트 찾기
        if(root[n]==n) return n;
        else return root[n]=find(root[n]);
    }   
    public void union(int a, int b){ //부모노드가 다르면 하나로 합치기
        a = find(a);
        b = find(b);
        if(a!=b) root[b]=a;
    }
    
    // 최소신장트리
    public int solution(int n, int[][] costs) {    
        
        root = new int[n]; //루트노드 초기값 세팅        
        for(int i=0;i<n;i++) { // root : [0,1,2,3]
            root[i]=i;  
        }        

        Arrays.sort(costs,(o1,o2)->o1[2]-o2[2]); // 비용 오름차순 정렬 
        // costs : [0,1,1],[1,3,1],[0,2,2],[1,2,5],[2,3,8]
        
        int cost=0;
        for(int i=0;i<costs.length;i++){
            int f = costs[i][0]; // 첫번째 섬
            int s = costs[i][1]; // 두번째 섬
            int c = costs[i][2]; // 비용
            
            if(find(f)!=find(s)){
                union(f,s); // 루트 합치기
                cost+=c; // 비용 추가
            }
        }
        return cost;
    }
}